AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ImageUri:
    Type: String
    Description: "URI of the Docker image in ECR"

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: S3AppVPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: S3AppPublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: S3AppPublicSubnet2

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: S3AppPublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: S3AppCluster

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: '*'

  # S3AccessRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - ecs-tasks.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/AmazonS3FullAccess

  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::week5-lab-bucket-nicholas        # Bucket level permissions
                  - !Sub arn:aws:s3:::week5-lab-bucket-nicholas/*    # Object level permissions

  # CodeBuild Role
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'

  # Create log group
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: s3-app-log-group

  # ECS Task Definition 
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: s3-app-task
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt S3AccessRole.Arn
      ContainerDefinitions:
        - Name: s3-app-container
          Essential: true
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: s3-app-log-group
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS traffic to the Load Balancer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ECSServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound traffic from Load Balancer to ECS service"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: s3-app-load-balancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application

  # Application Load Balancer Primary Target Group
  ECSLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tag-finder-target-group-blue
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 70
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"

  # Application Load Balancer Second Target Group
  ECSLoadBalancerTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: tag-finder-target-group-green
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 60
      HealthCheckIntervalSeconds: 70
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"

  # Application Load Balancer Listener (for HTTP traffic)
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ECSLoadBalancerTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: S3AppService
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSServiceSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref ECSLoadBalancerTargetGroup
          ContainerName: s3-app-container
          ContainerPort: 3000
      PropagateTags: SERVICE
      EnableECSManagedTags: true
    DependsOn:
      - Listener

  # CodeBuild Project
  # CodeBuildProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Name: MyECSBuildProject
  #     Source:
  #       Type: CODEPIPELINE
  #       BuildSpec: |
  #         version: 0.2
  #         phases:
  #           build:
  #             commands:
  #               - echo "Building task definition and appspec files"
  #               - |
  #                 cat > TaskDefinition.json << 'EOF'
  #                 {
  #                   "family": "s3-app-task",
  #                   "containerDefinitions": [
  #                     {
  #                       "name": "s3-app-container",
  #                       "image": "<IMAGE1_NAME>",
  #                       "essential": true,
  #                       "portMappings": [
  #                         {
  #                           "containerPort": 3000,
  #                           "hostPort": 3000
  #                         }
  #                       ],
  #                       "logConfiguration": {
  #                         "logDriver": "awslogs",
  #                         "options": {
  #                           "awslogs-group": "s3-app-log-group",
  #                           "awslogs-region": "${AWS::Region}",
  #                           "awslogs-stream-prefix": "ecs"
  #                         }
  #                       }
  #                     }
  #                   ],
  #                   "requiresCompatibilities": ["FARGATE"],
  #                   "cpu": "2048",
  #                   "memory": "4096",
  #                   "networkMode": "awsvpc"
  #                 }
  #                 EOF
  #               - |
  #                 cat > appspec.yaml << 'EOF'
  #                 version: 0.0
  #                 Resources:
  #                   - TargetService:
  #                       Type: AWS::ECS::Service
  #                       Properties:
  #                         TaskDefinition: <TASK_DEFINITION>
  #                         LoadBalancerInfo:
  #                           ContainerName: "s3-app-container"
  #                           ContainerPort: 3000
  #                         PlatformVersion: "LATEST"
  #                 EOF
  #         artifacts:
  #           files:
  #             - TaskDefinition.json
  #             - appspec.yaml
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Environment:
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: aws/codebuild/standard:5.0
  #       Type: LINUX_CONTAINER
  #     ServiceRole: !GetAtt CodeBuildRole.Arn
  #     TimeoutInMinutes: 10

  # # IAM Role for Auto Scaling
  # ECSAutoScalingRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: ECSAutoScalingRole
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - application-autoscaling.amazonaws.com
  #           Action:
  #             - sts:AssumeRole
  #     Policies:
  #       - PolicyName: ECSAutoScalingPolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:UpdateService
  #                 - ecs:DescribeServices
  #                 - application-autoscaling:RegisterScalableTarget
  #                 - application-autoscaling:DescribeScalableTargets
  #                 - application-autoscaling:PutScalingPolicy
  #               Resource: "*"
  #             - Effect: Allow
  #               Action:
  #                 - cloudwatch:PutMetricAlarm
  #                 - cloudwatch:DeleteAlarms
  #                 - application-autoscaling:*
  #               Resource: "*"

  # # Auto Scaling Target
  # ECSAutoScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn: ECSService
  #   Properties:
  #     MaxCapacity: 3
  #     MinCapacity: 1
  #     ResourceId: !Join
  #       - '/'
  #       - - service
  #         - !Ref Cluster
  #         - !GetAtt ECSService.Name
  #     RoleARN: !GetAtt ECSAutoScalingRole.Arn
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs

  # # Auto Scaling Policy
  # ECSAutoScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: ECSAutoScalingPolicy
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ECSAutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       TargetValue: 50
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization
  #       ScaleInCooldown: 60
  #       ScaleOutCooldown: 60

  # CodePipelineRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codepipeline.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: CodePipelinePolicy
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:*
  #                 - codebuild:*
  #                 - codecommit:*
  #                 - codedeploy:*
  #                 - ecs:*
  #                 - ecr:*
  #                 - cloudwatch:*
  #               Resource: "*"


  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      # ... other properties ...
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        EnvironmentVariables:
          - Name: IMAGE_URI
            Value: 677276083056.dkr.ecr.us-east-1.amazonaws.com/week5-lab-ecr-nicholas:latest
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo "Building task definition and appspec files"
                - |
                  cat > TaskDefinition.json << 'EOF'
                  {
                    "family": "s3-app-task",
                    "containerDefinitions": [
                      {
                        "name": "s3-app-container",
                        "image": "${IMAGE_URI}",
                        "essential": true,
                        "portMappings": [
                          {
                            "containerPort": 3000,
                            "hostPort": 3000
                          }
                        ],
                        "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                            "awslogs-group": "s3-app-log-group",
                            "awslogs-region": "${AWS::Region}",
                            "awslogs-stream-prefix": "ecs"
                          }
                        }
                      }
                    ],
                    "requiresCompatibilities": ["FARGATE"],
                    "cpu": "2048",
                    "memory": "4096",
                    "networkMode": "awsvpc"
                  }
                  EOF
                - |
                  cat > appspec.yaml << 'EOF'
                  version: 0.0
                  Resources:
                    - TargetService:
                        Type: AWS::ECS::Service
                        Properties:
                          TaskDefinition: <TASK_DEFINITION>
                          LoadBalancerInfo:
                            ContainerName: "s3-app-container"
                            ContainerPort: 3000
                          PlatformVersion: "LATEST"
                  EOF
          artifacts:
            files:
              - TaskDefinition.json
              - appspec.yaml


            
  # # CodePipeline
  # CodePipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     RoleArn: !GetAtt CodePipelineRole.Arn
  #     ArtifactStore:
  #       Type: S3
  #       Location: week5-lab-bucket-nicholas
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: SourceAction
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Provider: ECR
  #               Version: '1'
  #             Configuration:
  #               RepositoryName: week5-lab-ecr-nicholas
  #               ImageTag: latest
  #             OutputArtifacts:
  #               - Name: SourceOutput
  #       - Name: Build
  #         Actions:
  #           - Name: BuildTaskDefinition
  #             ActionTypeId:
  #               Category: Build
  #               Owner: AWS
  #               Provider: CodeBuild
  #               Version: '1'
  #             Configuration:
  #               ProjectName: !Ref CodeBuildProject
  #             InputArtifacts:
  #               - Name: SourceOutput
  #             OutputArtifacts:
  #               - Name: TaskDefinitionOutput
  #       - Name: Deploy
  #         Actions:
  #           - Name: DeployAction
  #             ActionTypeId:
  #               Category: Deploy
  #               Owner: AWS
  #               Provider: CodeDeployToECS
  #               Version: '1'
  #             Configuration:
  #               ApplicationName: !Ref CodeDeployApplication
  #               DeploymentGroupName: !Ref CodeDeployGroup
  #               TaskDefinitionTemplateArtifact: TaskDefinitionOutput
  #               TaskDefinitionTemplatePath: TaskDefinition.json
  #               AppSpecTemplateArtifact: TaskDefinitionOutput
  #               AppSpecTemplatePath: appspec.yaml
  #             InputArtifacts:
  #               - Name: SourceOutput
  #               - Name: TaskDefinitionOutput


  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                  - codebuild:*
                  - codecommit:*
                  - codedeploy:*
                  - ecs:*
                  - ecr:*
                  - cloudwatch:*
                Resource: "*"

                
  # CodePipeline
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: week5-lab-bucket-nicholas
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                RepositoryName: week5-lab-ecr-nicholas
                ImageTag: latest
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildTaskDefinition
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: TaskDefinitionOutput
        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeployToECS
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployGroup
                TaskDefinitionTemplateArtifact: TaskDefinitionOutput
                TaskDefinitionTemplatePath: TaskDefinition.json
                AppSpecTemplateArtifact: TaskDefinitionOutput
                AppSpecTemplatePath: appspec.yaml
              InputArtifacts:
                - Name: SourceOutput
                - Name: TaskDefinitionOutput

  # CodeDeploy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: ECS

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:*
                  - codedeploy:*
                Resource: "*"

  # CodeDeploy Deployment Group
  CodeDeployGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
          WaitTimeInMinutes: 0
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
      ECSServices:
        - ClusterName: !Ref Cluster
          ServiceName: !GetAtt ECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !Ref ECSLoadBalancerTargetGroup
              - Name: !Ref ECSLoadBalancerTargetGroup2
            ProdTrafficRoute:
              ListenerArns:
                - !Ref Listener

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  ALBEndpoint:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ALB.DNSName