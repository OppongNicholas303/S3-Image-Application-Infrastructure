AWSTemplateFormatVersion: '2010-09-09'
Description: 'Highly Available VPC for ECS Deployment with ALB'

Parameters:
  ImageUri:
    Type: String
    Description: "URI of the Docker image in ECR"

Resources:
  # VPC and Networking Resources
  S3AppMyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: S3AppMyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref S3AppMyVPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets
  S3AppPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref S3AppMyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: S3AppPublicSubnet1

  S3AppPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref S3AppMyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: S3AppPublicSubnet2

  S3AppPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref S3AppMyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: S3AppPrivateSubnet1

  S3AppPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref S3AppMyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: S3AppPrivateSubnet2

  # Route Tables and Routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref S3AppMyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref S3AppPublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref S3AppPublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref S3AppMyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref S3AppPrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref S3AppPrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # S3 VPC Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref S3AppMyVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: S3Endpoint

  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: week5-lab-bucket-nicholas-new
      VersioningConfiguration:
        Status: Enabled

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB security group
      VpcId: !Ref S3AppMyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS security group
      VpcId: !Ref S3AppMyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ECSSecurityGroup

  # Application Load Balancer Resources
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AttachGateway
    Properties:
      Name: MyALB
      Subnets:
        - !Ref S3AppPublicSubnet1
        - !Ref S3AppPublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Type: application
      Tags:
        - Key: Name
          Value: MyALB

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: S3AppTargetGroup
      VpcId: !Ref S3AppMyVPC
      Protocol: HTTP
      Port: 3000
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # Add ALB Listener - This is critical for the ECS service to work
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: 
      - ALB
      - TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: S3AppCluster

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::week5-lab-bucket-nicholas-new"
                  - !Sub "arn:aws:s3:::week5-lab-bucket-nicholas-new/*"
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: S3AppTask
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSExecutionRole.Arn
      Memory: "2048"
      Cpu: "4096"
      ContainerDefinitions:
        - Name: S3AppContainer
          Image: !Ref ImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 3000

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - HTTPListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref S3AppPrivateSubnet1
            - !Ref S3AppPrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: S3AppContainer
          ContainerPort: 3000

  # Auto Scaling Resources
  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:UpdateService
                  - ecs:DescribeServices
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                Resource: "*"

  ECSAutoScalingGroup:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub "service/${ECSCluster}/${ECSService}"
      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"

  ScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "ScaleOutPolicy"
      PolicyType: "StepScaling"
      ScalingTargetId: !Ref ECSAutoScalingGroup
      StepScalingPolicyConfiguration:
        AdjustmentType: "PercentChangeInCapacity"
        StepAdjustments:
          - ScalingAdjustment: 100
            MetricIntervalLowerBound: 0
        Cooldown: 300

  ScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "ScaleInPolicy"
      PolicyType: "StepScaling"
      ScalingTargetId: !Ref ECSAutoScalingGroup
      StepScalingPolicyConfiguration:
        AdjustmentType: "PercentChangeInCapacity"
        StepAdjustments:
          - ScalingAdjustment: -100
            MetricIntervalUpperBound: 0
        Cooldown: 300

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when CPU usage is high"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: "ServiceName"
          Value: !Ref ECSService
        - Name: "ClusterName"
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref ScaleOutPolicy

  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm when CPU usage is low"
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: "ServiceName"
          Value: !Ref ECSService
        - Name: "ClusterName"
          Value: !Ref ECSCluster
      AlarmActions:
        - !Ref ScaleInPolicy

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref S3AppMyVPC
  ALBEndpoint:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ALB.DNSName